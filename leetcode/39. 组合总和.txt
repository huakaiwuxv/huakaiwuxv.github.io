class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> listtmp = new ArrayList<>();
        Arrays.sort(candidates);
        dfs(res,listtmp,candidates,target,0);
        return res;
    }
//创建深度搜索函数dfs
    public void dfs(List<List<Integer>> res,List<Integer> listtmp,int[] candidates,int target,int start){
        if(target<0)//不满足条件
            return;
        else if(target == 0){ //满足条件，将结果添加进res中
            res.add(new ArrayList<>(listtmp));
        }else{  //还可以搜索
            for(int i = start;i<candidates.length;i++){
                listtmp.add(candidates[i]);
                dfs(res,listtmp,candidates,target-candidates[i],i);//注意这里用i，防止重复的元素被选取到
                listtmp.remove(listtmp.size()-1); //再次循环
            }            
        }
    }
}
