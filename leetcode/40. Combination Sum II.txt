class Solution {
//按照39题的思路
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> listtmp = new ArrayList<>();
        Arrays.sort(candidates);
        dfs(res,listtmp,candidates,target,0);
        Set set1 = new HashSet(res);
        res = new ArrayList(set1);
        return res;
    }
    public void dfs(List<List<Integer>> res,List<Integer> listtmp,int[] candidates,int target,int start){
        if(target<0)
            return;
        else if(target == 0){
            res.add(new ArrayList<>(listtmp));
        }else{
            for(int i = start;i<candidates.length;i++){
                listtmp.add(candidates[i]);
                dfs(res,listtmp,candidates,target-candidates[i],i+1);//区别在于i+1,之后去重
                listtmp.remove(listtmp.size()-1);
            }            
        }
    }
}