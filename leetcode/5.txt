class Solution {
    public String longestPalindrome(String s) {
        int len = s.length();
        int start = 0;
        int maxlen = 0;
        if(len>0)
            maxlen =1;
        boolean[][] p = new boolean [len][len];
//处理回文子串为2及一下的
        for(int i = 0; i < len; i++){     
            p[i][i]=true;
            
            if(i < len - 1 && s.charAt(i) == s.charAt(i + 1)){
                 p[i][i + 1] = true;
                 start = i;
                 maxlen = 2;
             }
         }
//处理回文子串为3及以上的
        for(int substrlen = 3;substrlen<=len;substrlen++){
            for(int i =0 ;i <=len - substrlen;i++){
                int z=substrlen+i-1;
                if(p[i+1][z-1] && s.charAt(i)==s.charAt(z)){
                    p[i][z]=true;
                    maxlen = substrlen;
                    start = i;
                }
            } 
        }
        if(maxlen>0)
            return s.substring(start,start+maxlen);
        return "";
    }
}